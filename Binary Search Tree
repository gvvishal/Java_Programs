INORDER TRAVERSAL


class Node {
    int data;
    Node right;
    Node left;

    public Node(int data) {
        this.data = data;
        this.left = null;
        this.right = null;
    }
}

class BST {
    Node root;

    public void insert(int data) {
        root = insertRec(root, data);
    }

    public Node insertRec(Node root, int data) {
        if (root == null) {
            root = new Node(data);
            return root;
        }

        if (data < root.data) {
            root.left = insertRec(root.left, data);
        } else if (data > root.data) {
            root.right = insertRec(root.right, data);
        }

        return root;
    }

    // In-order traversal method
    public void inOrder() {
        inOrderRec(root);
    }

    public void inOrderRec(Node root) {
        if (root != null) {
            inOrderRec(root.left);    // Traverse left subtree
            System.out.print(root.data + " ");  // Visit current node
            inOrderRec(root.right);   // Traverse right subtree
        }
    }
}

class Main {
    public static void main(String[] args) {
        BST bst = new BST();
        bst.insert(50);
        bst.insert(30);
        bst.insert(70);
        bst.insert(20);
        bst.insert(40);
        bst.insert(60);
        bst.insert(80);

        // Perform in-order traversal and print the result
        System.out.println("In-order traversal of the BST:");
        bst.inOrder();  // Should print: 20 30 40 50 60 70 80
    }
}




POSTORDER TRAVERSAL


class Node {
    int data;
    Node right;
    Node left;

    public Node(int data) {
        this.data = data;
        this.left = null;
        this.right = null;
    }
}

class BST {
    Node root;

    public void insert(int data) {
        root = insertRec(root, data);
    }

    public Node insertRec(Node root, int data) {
        if (root == null) {
            root = new Node(data);
            return root;
        }

        if (data < root.data) {
            root.left = insertRec(root.left, data);
        } else if (data > root.data) {
            root.right = insertRec(root.right, data);
        }

        return root;
    }

    // Post-order traversal method
    public void postOrder() {
        postOrderRec(root);
    }

    public void postOrderRec(Node root) {
        if (root != null) {
            postOrderRec(root.left);    // Step 1: Traverse the left subtree
            postOrderRec(root.right);   // Step 2: Traverse the right subtree
            System.out.print(root.data + " ");  // Step 3: Visit the current node
        }
    }
}

class Main {
    public static void main(String[] args) {
        BST bst = new BST();
        bst.insert(50);
        bst.insert(30);
        bst.insert(70);
        bst.insert(20);
        bst.insert(40);
        bst.insert(60);
        bst.insert(80);

        // Perform post-order traversal and print the result
        System.out.println("Post-order traversal of the BST:");
        bst.postOrder();  // Should print: 20 40 30 60 80 70 50
    }
}


PREORDER TRAVERSAL



 class Node {
    int data;
    Node right;
    Node left;

    public Node(int data) {
        this.data = data;
        this.left = null;
        this.right = null;
    }
}

class BST {
    Node root;

    public void insert(int data) {
        root = insertRec(root, data);
    }

    public Node insertRec(Node root, int data) {
        if (root == null) {
            root = new Node(data);
            return root;
        }

        if (data < root.data) {
            root.left = insertRec(root.left, data);
        } else if (data > root.data) {
            root.right = insertRec(root.right, data);
        }

        return root;
    }

    // Pre-order traversal method
    public void preOrder() {
        preOrderRec(root);
    }

    public void preOrderRec(Node root) {
        if (root != null) {
            System.out.print(root.data + " ");  // Step 1: Visit the current node
            preOrderRec(root.left);             // Step 2: Traverse the left subtree
            preOrderRec(root.right);            // Step 3: Traverse the right subtree
        }
    }
}

class Main {
    public static void main(String[] args) {
        BST bst = new BST();
        bst.insert(50);
        bst.insert(30);
        bst.insert(70);
        bst.insert(20);
        bst.insert(40);
        bst.insert(60);
        bst.insert(80);

        // Perform pre-order traversal and print the result
        System.out.println("Pre-order traversal of the BST:");
        bst.preOrder();  // Should print: 50 30 20 40 70 60 80
    }
}

